{"version":3,"sources":["../../../src/swc/__tests__/options.test.ts"],"sourcesContent":["import type { Options } from \"@swc/core\";\nimport deepmerge from \"deepmerge\";\n\nimport parserArgs, { CliOptions, initProgram } from \"../options\";\n\ninterface ParserArgsReturn {\n  swcOptions: Options;\n  cliOptions: CliOptions;\n}\n\nconst createDefaultResult = (): ParserArgsReturn => ({\n  cliOptions: {\n    copyFiles: false,\n    deleteDirOnStart: false,\n    extensions: [\n      \".js\",\n      \".jsx\",\n      \".es6\",\n      \".es\",\n      \".mjs\",\n      \".ts\",\n      \".tsx\",\n      \".cts\",\n      \".mts\",\n    ],\n    // @ts-expect-error\n    filename: undefined,\n    filenames: [\"src\"],\n    ignore: [],\n    includeDotfiles: false,\n    only: [],\n    // @ts-expect-error\n    outDir: undefined,\n    // @ts-expect-error\n    outFile: undefined,\n    outFileExtension: \"js\",\n    quiet: false,\n    sourceMapTarget: undefined,\n    stripLeadingPaths: false,\n    sync: false,\n    watch: false,\n  },\n  swcOptions: {\n    configFile: undefined,\n    jsc: { parser: undefined, transform: {} },\n    sourceFileName: undefined,\n    sourceMaps: undefined,\n    sourceRoot: undefined,\n    swcrc: true,\n  },\n});\n\ndescribe(\"parserArgs\", () => {\n  let defaultResult: ParserArgsReturn;\n\n  beforeEach(() => {\n    defaultResult = createDefaultResult();\n    initProgram();\n  });\n\n  it(\"minimal args returns default result\", async () => {\n    const args = [\"node\", \"/path/to/node_modules/swc-cli/bin/swc.js\", \"src\"];\n    const result = await parserArgs(args);\n    expect(result).toEqual(defaultResult);\n  });\n\n  describe(\"--out-file-extension\", () => {\n    it(\"provides the extension in the parsed args\", () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--out-file-extension\",\n        \"magic_custom_extension\",\n      ];\n      const result = parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        cliOptions: { outFileExtension: \"magic_custom_extension\" },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"provides a sensible default\", () => {\n      const args = [\"node\", \"/path/to/node_modules/swc-cli/bin/swc.js\", \"src\"];\n      const result = parserArgs(args);\n      expect(result.cliOptions.outFileExtension).toEqual(\"js\");\n    });\n  });\n\n  describe(\"errors\", () => {\n    let mockExit: jest.SpyInstance;\n    let mockConsoleError: jest.SpyInstance;\n\n    beforeAll(() => {\n      //@ts-expect-error\n      mockExit = jest.spyOn(process, \"exit\").mockImplementation(() => {});\n      mockConsoleError = jest\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n    });\n\n    beforeEach(() => {\n      mockExit.mockClear();\n      mockConsoleError.mockClear();\n    });\n\n    afterAll(() => {\n      mockExit.mockRestore();\n      mockConsoleError.mockRestore();\n    });\n\n    it(\"exits without filenames\", async () => {\n      const args = [\"node\", \"/path/to/node_modules/swc-cli/bin/swc.js\"];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"--watch exits without --out-dir\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--watch\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"--watch exits without filenames\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--watch\",\n        \"--out-dir\",\n        \"esm\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(3);\n    });\n\n    it(\"--out-dir exits with conflicting -out-file\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--out-file\",\n        \"esm/index.js\",\n        \"--out-dir\",\n        \"esm\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"--workers exits on non-numeric values\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--workers\",\n        \"not-a-number\",\n        \"src\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"--workers exits on non-integer values\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--workers\",\n        \"1.5\",\n        \"src\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe(\"--source-maps\", () => {\n    it(\"source maps is ambiguous\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--source-maps\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        swcOptions: { sourceMaps: true },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"source maps true\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--source-maps\",\n        \"true\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        swcOptions: { sourceMaps: true },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"source maps inline\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"-s\",\n        \"inline\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        swcOptions: { sourceMaps: \"inline\" },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n  });\n\n  describe(\"--config\", () => {\n    it(\"throws with no config\", async () => {\n      let mockConsoleError: jest.SpyInstance;\n\n      mockConsoleError = jest\n        .spyOn(process.stderr, \"write\")\n        .mockImplementation(() => {\n          return true;\n        });\n\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"-C\",\n      ];\n      expect(() => parserArgs(args)).toThrow();\n\n      mockConsoleError.mockRestore();\n    });\n\n    it(\"react development\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"jsc.transform.react.development=true\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"react development and commonjs (two config options)\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"jsc.transform.react.development=true\",\n        \"-C\",\n        \"module.type=commonjs\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n        module: { type: \"commonjs\" },\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"react development and commonjs (comma-separated)\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"jsc.transform.react.development=true,module.type=commonjs\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n        module: { type: \"commonjs\" },\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"no equals sign\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"no_equals\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        no_equals: true,\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n  });\n});\n"],"names":["createDefaultResult","cliOptions","copyFiles","deleteDirOnStart","extensions","filename","undefined","filenames","ignore","includeDotfiles","only","outDir","outFile","outFileExtension","quiet","sourceMapTarget","stripLeadingPaths","sync","watch","swcOptions","configFile","jsc","parser","transform","sourceFileName","sourceMaps","sourceRoot","swcrc","describe","defaultResult","beforeEach","initProgram","it","args","result","parserArgs","expect","toEqual","expectedOptions","deepmerge","mockExit","mockConsoleError","beforeAll","jest","spyOn","process","mockImplementation","console","mockClear","afterAll","mockRestore","toHaveBeenCalledWith","toHaveBeenCalledTimes","stderr","toThrow","react","development","module","type","no_equals"],"mappings":"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"}